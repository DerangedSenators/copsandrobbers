name: Unity Actions

on:
  pull_request: {}
  push:
    branches: [main, CI-Staging]
    tags:
      - 'v*'

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_VERSION: 2019.4.6f1
  PROJECT_PATH: "Cops And Robbers"

jobs:
  checklicense:
    name: check if UNITY_LICENSE is set in github secrets
    runs-on: ubuntu-20.04
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        run: |
            echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
            echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"
  activation:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Request activation file ðŸ”‘
    runs-on: ubuntu-latest
    steps:
      # Request manual activation file
      - name: Request manual activation file
        id: getManualLicenseFile
        uses: webbertakken/unity-request-manual-activation-file@master
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  build:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX
          - StandaloneWindows64
          - StandaloneLinux64
          #- iOS # Build an iOS player.
          # - Android # Build an Android .apk.
          #          - StandaloneWindows # Build a Windows standalone.
          #          - WebGL # WebGL.
          #          - WSAPlayer # Build an Windows Store Apps player.
          #          - PS4 # Build a PS4 Standalone.
          #          - XboxOne # Build a Xbox One Standalone.
          #          - tvOS # Build to Apple's tvOS platform.
          #          - Switch # Build a Nintendo Switch player
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 
          lfs: true
      - name: Find Tag
        id: tagger
        uses: jimschubert/query-tag-action@v1
        with:
          include: 'v*'
          exclude: '*_*' 
          commit-ish: 'HEAD~'  
      - uses: actions/cache@v1.1.0
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
      - uses: webbertakken/unity-builder@v1.4
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: ${{ matrix.targetPlatform }}
          customParameters: "-nographics"
  release:
    needs: [build]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    name: Release Tag
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Content
        id: prep_content
        run: |
          sudo apt install zip tree
          tree
          cd Build
          mv StandaloneLinux64/ Linux64/
          mv StandaloneOSX/ OSX/
          mv StandaloneWindows64/ Windows64/
          zip -r Linux64.zip Linux64
          zip -r OSX.zip OSX/
          zip -r Windows64.zip Windows64
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md
      - name: Upload Release Asset Windows64
        id: upload-release-asset_win64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./Build/Windows64.zip
          asset_name: Windows64.zip
          asset_content_type: application/zip
      - name: Upload Release Asset Linux64
        id: upload-release-asset_linux64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./Build/Linux64.zip
          asset_name: Linux64.zip
          asset_content_type: application/zip
      - name: Upload Release Asset OSX
        id: upload-release-asset_osx
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./Build/OSX.zip
          asset_name: OSX.zip
          asset_content_type: application/zip
